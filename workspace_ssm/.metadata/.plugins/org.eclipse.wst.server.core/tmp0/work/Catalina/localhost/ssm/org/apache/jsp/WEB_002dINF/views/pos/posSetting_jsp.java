/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-04-11 10:30:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.pos;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class posSetting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1711624598000L));
    _jspx_dependants.put("jar:file:/D:/workspace_ssm/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ssm/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.servletContext.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/common/reset.css\" />\r\n");
      out.write("<style>\r\n");
      out.write(".wrap {\r\n");
      out.write("	width: 1000px;\r\n");
      out.write("	padding: 10px 600px 50px 600px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".header {\r\n");
      out.write("	background-color: orange;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	height: 10vh;\r\n");
      out.write("	font-size: 30px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-wrap: nowrap;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	font-weight: 700;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".body, .footer {\r\n");
      out.write("	background-color: lightgray;\r\n");
      out.write("	width: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".body {\r\n");
      out.write("	height: 80vh;\r\n");
      out.write("	display: flex;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".body .tableView {\r\n");
      out.write("	width: 80%;\r\n");
      out.write("	height: 100%;\r\n");
      out.write("	padding: 30px;\r\n");
      out.write("	position: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".body .buttonList {\r\n");
      out.write("	width: 20%;\r\n");
      out.write("	height: 100%;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	justify-content: flex-end;\r\n");
      out.write("	padding-right: 5px;\r\n");
      out.write("	parring-bottom: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".title p {\r\n");
      out.write("	color: black;\r\n");
      out.write("	font-weight: bolder;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".button {\r\n");
      out.write("	border: none;\r\n");
      out.write("	color: white;\r\n");
      out.write("	padding: 15px 32px;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	display: inline-block;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	margin: 4px 2px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	font-weight: 800;\r\n");
      out.write("	height: 80px;\r\n");
      out.write("}\r\n");
      out.write("/*테이블 모양*/\r\n");
      out.write(".tableView {\r\n");
      out.write("	position: relative;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".tableView a {\r\n");
      out.write("	min-width: 150px;\r\n");
      out.write("	min-height: 200px;\r\n");
      out.write("	max-width: 150px;\r\n");
      out.write("	max-height: 200px;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	line-height: 80px;\r\n");
      out.write("	background-color: white;\r\n");
      out.write("	border: 2px solid black;\r\n");
      out.write("	border-radius: 8px;\r\n");
      out.write("	margin-bottom: 4px;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".table:hover {\r\n");
      out.write("	box-shadow: 0 0 10px 0 darkgray;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".table.selected {\r\n");
      out.write("	border: 3px solid red; /* 선택된 테이블에 빨간 테두리 추가 */\r\n");
      out.write("}\r\n");
      out.write("/* 테이블 추가 버튼 */\r\n");
      out.write(".button.add {\r\n");
      out.write("	background-color: DodgerBlue;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 테이블 삭제 버튼 */\r\n");
      out.write(".button.delete {\r\n");
      out.write("	background-color: red;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 메뉴 관리 버튼 */\r\n");
      out.write(".button.menu {\r\n");
      out.write("	background-color: DodgerBlue;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 저장 버튼 */\r\n");
      out.write(".button.save {\r\n");
      out.write("	background-color: LimeGreen;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 돌아가기 버튼 */\r\n");
      out.write(".button.return {\r\n");
      out.write("	background-color: DodgerBlue;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("	src=\"/ssm/resources/js/jquery-3.7.0.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"/ssm/resources/css/jquery-ui-1.13.2/jquery-ui.min.css\" />\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("	src=\"/ssm/resources/css/jquery-ui-1.13.2/jquery-ui.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("	document.querySelectorAll(\".table\").forEach((element)=>{\r\n");
      out.write("		 element.setAttribute('draggable','true');\r\n");
      out.write("		element.addEventListener(\"dragstart\", (event)=>{\r\n");
      out.write("			const objectId = event.target.id; // 해당 객체의 ID 값을 가져옴\r\n");
      out.write("		    const posX = event.offsetX;\r\n");
      out.write("		    const posY = event.offsetY;\r\n");
      out.write("		    event.dataTransfer.setData(\"text/plain\", objectId+\",\"+posX+\",\"+posY); // 드래그하는 요소의 ID 값을 설정하여 데이터 전송 준비\r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	document.querySelector(\"#tableView\").addEventListener(\"dragover\",(event)=>{\r\n");
      out.write("		event.preventDefault();\r\n");
      out.write("		event.stopPropagation();\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	document.querySelector(\"#tableView\").addEventListener(\"drop\", (event)=>{\r\n");
      out.write("		event.preventDefault();\r\n");
      out.write("		event.stopPropagation();\r\n");
      out.write("		\r\n");
      out.write("		const tableViewOffSet = $('#tableView').offset();\r\n");
      out.write("		const relativeX = event.pageX - tableViewOffSet.left;\r\n");
      out.write("		const relativeY = event.pageY - tableViewOffSet.top;\r\n");
      out.write("		\r\n");
      out.write("		var [id, posX, posY] = event.dataTransfer.getData(\"text/plain\").split(\",\");\r\n");
      out.write("		console.log(id);\r\n");
      out.write("		$('#' + id).css('left', (relativeX-parseInt(posX)) + 'px');\r\n");
      out.write("		$('#' + id).css('top', (relativeY-parseInt(posY)) + 'px');\r\n");
      out.write("	});\r\n");
      out.write("	$(document).on('click', '.table', function() {\r\n");
      out.write("	    $('.table').removeClass('selected');\r\n");
      out.write("	    $(this).addClass('selected');\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("});//documentReady\r\n");
      out.write("function addTable() {\r\n");
      out.write("	var linkCount = $('#tableView a').length;\r\n");
      out.write("	if(linkCount>5){\r\n");
      out.write("		alert('테이블은 6개 까지 추가 가능합니다.');\r\n");
      out.write("	}else{\r\n");
      out.write("		const existingIds = new Set(); // 이미 존재하는 테이블의 ID를 저장하기 위한 Set\r\n");
      out.write("	    // 이미 존재하는 테이블의 ID를 확인하여 Set에 추가\r\n");
      out.write("	    $('#tableView a').each(function() {\r\n");
      out.write("	        existingIds.add($(this).attr('id'));\r\n");
      out.write("	    });\r\n");
      out.write("	    // 사용되지 않은 ID를 찾아서 새로운 테이블에 할당\r\n");
      out.write("	    let newId;\r\n");
      out.write("	    for (let i = 1; i <= linkCount + 1; i++) {\r\n");
      out.write("	        newId = 'table' + i;\r\n");
      out.write("	        if (!existingIds.has(newId)) {\r\n");
      out.write("	            break;\r\n");
      out.write("	        }\r\n");
      out.write("	    }\r\n");
      out.write("    // 새로운 <a> 태그 생성\r\n");
      out.write("    const newLink = document.createElement('a');\r\n");
      out.write("    newLink.textContent = newId; // 링크 텍스트 설정\r\n");
      out.write("    newLink.setAttribute('class','table');\r\n");
      out.write("    newLink.setAttribute('draggable','true');\r\n");
      out.write("    newLink.setAttribute('href', '#'); // 링크 URL 설정\r\n");
      out.write("	newLink.setAttribute('id',newId);\r\n");
      out.write("    newLink.addEventListener(\"dragstart\", (event) => {\r\n");
      out.write("	    const objectId = event.target.id; // 해당 객체의 ID 값을 가져옴\r\n");
      out.write("	    const posX = event.offsetX;\r\n");
      out.write("	    const posY = event.offsetY;\r\n");
      out.write("	    event.dataTransfer.setData(\"text/plain\", objectId+\",\"+posX+\",\"+posY); // 드래그하는 요소의 ID 값을 설정하여 데이터 전송 준비\r\n");
      out.write("    });\r\n");
      out.write("    // 새로운 <a> 태그를 tableView 안에 추가\r\n");
      out.write("    $('#tableView').append(newLink);\r\n");
      out.write("	}\r\n");
      out.write("}\r\n");
      out.write("function deleteTable() {\r\n");
      out.write("	const selectedTable = document.querySelector('.table.selected');\r\n");
      out.write("    if (selectedTable) {\r\n");
      out.write("        const tableId = selectedTable.id; // 선택된 테이블의 ID 값을 가져옴\r\n");
      out.write("        selectedTable.remove();\r\n");
      out.write("\r\n");
      out.write("        // 선택된 테이블의 ID 값을 URL에 추가하여 페이지 이동\r\n");
      out.write("        location.href = 'deleteTable.do?tableName=' + encodeURIComponent(tableId) +'&id='+");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("    } else {\r\n");
      out.write("        alert('삭제할 테이블을 선택하세요.');\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("function saveTable(){\r\n");
      out.write("	if(Count ==0){\r\n");
      out.write("		alert(\"테이블이 존재하지 않습니다.\");\r\n");
      out.write("	}else{\r\n");
      out.write("	var userId= $('#userId').val();\r\n");
      out.write("	var jarr = new Array();// 테이블 객체 담을 배열\r\n");
      out.write("	var Count = $('#tableView a').length;\r\n");
      out.write("	var i;\r\n");
      out.write("	for(i=1; i<=Count; i++){\r\n");
      out.write("	var job = new Object();\r\n");
      out.write("	job.tableName = 'table'+i;\r\n");
      out.write("	console.log(job.tableName);\r\n");
      out.write("	job.tableX=$('#table'+i).css('left');\r\n");
      out.write("	console.log(job.tableX);\r\n");
      out.write("	job.tableY=$('#table'+i).css('top');\r\n");
      out.write("	console.log(job.tableY);\r\n");
      out.write("	job.userId = userId;\r\n");
      out.write("	jarr.push(job);\r\n");
      out.write("	};\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		url: \"saveTableXY.do\",\r\n");
      out.write("		type: 'post',\r\n");
      out.write("		data: JSON.stringify(jarr),\r\n");
      out.write("		contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("		success: function(result){\r\n");
      out.write("			alert(\"요청 성공 : \" + result);				\r\n");
      out.write("		},\r\n");
      out.write("		error: function(request, status, errorData){\r\n");
      out.write("			console.log(\"error code : \" + request.status\r\n");
      out.write("					+ \"\\nMessage : \" + request.responseText\r\n");
      out.write("					+ \"\\nError : \" + errorData);\r\n");
      out.write("		}\r\n");
      out.write("	}); //ajax		\r\n");
      out.write("	\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<title>SSM웹포스기 세팅화면</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"wrap\">\r\n");
      out.write("		<div class=\"header\">\r\n");
      out.write("			<p class=\"title\">SSM 웹 포스기</p>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"body\">\r\n");
      out.write("\r\n");
      out.write("			<div class=\"tableView\" id=\"tableView\">\r\n");
      out.write("				");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"buttonList\">\r\n");
      out.write("				<button class=\"button add\" onclick=\"addTable();\">테이블 추가</button>\r\n");
      out.write("				<button class=\"button delete\" onclick=\"deleteTable()\">테이블\r\n");
      out.write("					삭제</button>\r\n");
      out.write("				<button class=\"button menu\">메뉴 관리</button>\r\n");
      out.write("				<button class=\"button save\" onclick=\"saveTable()\">저장</button>\r\n");
      out.write("				<button class=\"button return\"\r\n");
      out.write("					onclick=\"location.href = 'mvTablePos.do?id=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">돌아가기</button>\r\n");
      out.write("				<input type=\"hidden\" id=\"userId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/pos/posSetting.jsp(265,4) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/pos/posSetting.jsp(265,4) '${requestScope.list}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${requestScope.list}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/pos/posSetting.jsp(265,4) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("t");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("					<a class=\"table\" id=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${t.tableName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"\r\n");
            out.write("						style=\"left:");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${t.tableX}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("px;top:");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${t.tableY}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("px\">");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${t.tableName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</a>\r\n");
            out.write("				");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
